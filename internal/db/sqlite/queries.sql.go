// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sqlite

import (
	"context"
	"database/sql"
)

const createAnnouncement = `-- name: CreateAnnouncement :exec
INSERT INTO
    announcement (
        uuid,
        event_groups_group_uuid,
        approved_by_list_uuid,
        visibility,
        announce_at,
        discord_channel_id,
        discord_message_id
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?)
`

type CreateAnnouncementParams struct {
	Uuid                 string         `json:"uuid"`
	EventGroupsGroupUuid sql.NullString `json:"event_groups_group_uuid"`
	ApprovedByListUuid   sql.NullString `json:"approved_by_list_uuid"`
	Visibility           string         `json:"visibility"`
	AnnounceAt           int64          `json:"announce_at"`
	DiscordChannelID     sql.NullString `json:"discord_channel_id"`
	DiscordMessageID     sql.NullString `json:"discord_message_id"`
}

func (q *Queries) CreateAnnouncement(ctx context.Context, arg CreateAnnouncementParams) error {
	_, err := q.db.ExecContext(ctx, createAnnouncement,
		arg.Uuid,
		arg.EventGroupsGroupUuid,
		arg.ApprovedByListUuid,
		arg.Visibility,
		arg.AnnounceAt,
		arg.DiscordChannelID,
		arg.DiscordMessageID,
	)
	return err
}

const createEvent = `-- name: CreateEvent :exec
INSERT INTO
    event (
        uuid,
        location,
        start_at,
        end_at,
        is_all_day,
        host,
        visibility
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?)
`

type CreateEventParams struct {
	Uuid       string      `json:"uuid"`
	Location   string      `json:"location"`
	StartAt    interface{} `json:"start_at"`
	EndAt      interface{} `json:"end_at"`
	IsAllDay   bool        `json:"is_all_day"`
	Host       string      `json:"host"`
	Visibility string      `json:"visibility"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.Uuid,
		arg.Location,
		arg.StartAt,
		arg.EndAt,
		arg.IsAllDay,
		arg.Host,
		arg.Visibility,
	)
	return err
}

const createGroupResourceMapping = `-- name: CreateGroupResourceMapping :exec
INSERT INTO
    group_id_resource_list_mapping (
        group_uuid,
        resource_uuid,
        index_in_list,
        created_at,
        updated_at,
        deleted_at
    )
VALUES
    (?, ?, ?, ?, ?, ?)
`

type CreateGroupResourceMappingParams struct {
	GroupUuid    sql.NullString `json:"group_uuid"`
	ResourceUuid string         `json:"resource_uuid"`
	IndexInList  int64          `json:"index_in_list"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
	DeletedAt    sql.NullTime   `json:"deleted_at"`
}

func (q *Queries) CreateGroupResourceMapping(ctx context.Context, arg CreateGroupResourceMappingParams) error {
	_, err := q.db.ExecContext(ctx, createGroupResourceMapping,
		arg.GroupUuid,
		arg.ResourceUuid,
		arg.IndexInList,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	return err
}

const createPerson = `-- name: CreatePerson :exec
INSERT INTO
    person (uuid, name, preferred_pronoun)
VALUES
    (?, ?, ?)
`

type CreatePersonParams struct {
	Uuid             sql.NullString `json:"uuid"`
	Name             sql.NullString `json:"name"`
	PreferredPronoun sql.NullString `json:"preferred_pronoun"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) error {
	_, err := q.db.ExecContext(ctx, createPerson, arg.Uuid, arg.Name, arg.PreferredPronoun)
	return err
}

const createResource = `-- name: CreateResource :exec
INSERT INTO
    resource (
        uuid,
        title,
        content_md,
        image_url,
        resource_type,
        created_at,
        updated_at,
        deleted_at
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateResourceParams struct {
	Uuid         string         `json:"uuid"`
	Title        string         `json:"title"`
	ContentMd    string         `json:"content_md"`
	ImageUrl     sql.NullString `json:"image_url"`
	ResourceType string         `json:"resource_type"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
	DeletedAt    sql.NullTime   `json:"deleted_at"`
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) error {
	_, err := q.db.ExecContext(ctx, createResource,
		arg.Uuid,
		arg.Title,
		arg.ContentMd,
		arg.ImageUrl,
		arg.ResourceType,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	return err
}

const createResourceGroupMapping = `-- name: CreateResourceGroupMapping :exec
INSERT INTO
    resource_id_group_id_mapping (
        resource_uuid,
        group_uuid,
        type,
        created_at,
        updated_at,
        deleted_at
    )
VALUES
    (?, ?, ?, ?, ?, ?)
`

type CreateResourceGroupMappingParams struct {
	ResourceUuid sql.NullString `json:"resource_uuid"`
	GroupUuid    string         `json:"group_uuid"`
	Type         sql.NullString `json:"type"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
	DeletedAt    sql.NullTime   `json:"deleted_at"`
}

func (q *Queries) CreateResourceGroupMapping(ctx context.Context, arg CreateResourceGroupMappingParams) error {
	_, err := q.db.ExecContext(ctx, createResourceGroupMapping,
		arg.ResourceUuid,
		arg.GroupUuid,
		arg.Type,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
	)
	return err
}

const deleteResource = `-- name: DeleteResource :exec
DELETE FROM resource
WHERE
    uuid = ?
`

func (q *Queries) DeleteResource(ctx context.Context, uuid string) error {
	_, err := q.db.ExecContext(ctx, deleteResource, uuid)
	return err
}

const getAnnouncement = `-- name: GetAnnouncement :one
SELECT
    uuid,
    event_groups_group_uuid,
    approved_by_list_uuid,
    visibility,
    announce_at,
    discord_channel_id,
    discord_message_id
from
    announcement
where
    uuid = ?
`

func (q *Queries) GetAnnouncement(ctx context.Context, uuid string) (Announcement, error) {
	row := q.db.QueryRowContext(ctx, getAnnouncement, uuid)
	var i Announcement
	err := row.Scan(
		&i.Uuid,
		&i.EventGroupsGroupUuid,
		&i.ApprovedByListUuid,
		&i.Visibility,
		&i.AnnounceAt,
		&i.DiscordChannelID,
		&i.DiscordMessageID,
	)
	return i, err
}

const getEvent = `-- name: GetEvent :one
SELECT
    uuid,
    location,
    start_at,
    end_at,
    is_all_day,
    host,
    visibility
from
    event
where
    uuid = ?
`

func (q *Queries) GetEvent(ctx context.Context, uuid string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, uuid)
	var i Event
	err := row.Scan(
		&i.Uuid,
		&i.Location,
		&i.StartAt,
		&i.EndAt,
		&i.IsAllDay,
		&i.Host,
		&i.Visibility,
	)
	return i, err
}

const getGroupResourceMapping = `-- name: GetGroupResourceMapping :many
SELECT
    group_uuid,
    resource_uuid,
    index_in_list,
    created_at,
    updated_at,
    deleted_at
from
    group_id_resource_list_mapping
where
    group_uuid = ?
`

func (q *Queries) GetGroupResourceMapping(ctx context.Context, groupUuid sql.NullString) ([]GroupIDResourceListMapping, error) {
	rows, err := q.db.QueryContext(ctx, getGroupResourceMapping, groupUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupIDResourceListMapping
	for rows.Next() {
		var i GroupIDResourceListMapping
		if err := rows.Scan(
			&i.GroupUuid,
			&i.ResourceUuid,
			&i.IndexInList,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPerson = `-- name: GetPerson :one
SELECT
    uuid,
    name,
    preferred_pronoun
from
    person
where
    uuid = ?
`

func (q *Queries) GetPerson(ctx context.Context, uuid sql.NullString) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, uuid)
	var i Person
	err := row.Scan(&i.Uuid, &i.Name, &i.PreferredPronoun)
	return i, err
}

const getResource = `-- name: GetResource :one
SELECT
    uuid,
    title,
    content_md,
    image_url,
    resource_type,
    created_at,
    updated_at,
    deleted_at
from
    resource
where
    uuid = ?
`

func (q *Queries) GetResource(ctx context.Context, uuid string) (Resource, error) {
	row := q.db.QueryRowContext(ctx, getResource, uuid)
	var i Resource
	err := row.Scan(
		&i.Uuid,
		&i.Title,
		&i.ContentMd,
		&i.ImageUrl,
		&i.ResourceType,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getResourceGroupMapping = `-- name: GetResourceGroupMapping :many
SELECT
    resource_uuid,
    group_uuid,
    type,
    created_at,
    updated_at,
    deleted_at
from
    resource_id_group_id_mapping
where
    resource_uuid = ?
`

func (q *Queries) GetResourceGroupMapping(ctx context.Context, resourceUuid sql.NullString) ([]ResourceIDGroupIDMapping, error) {
	rows, err := q.db.QueryContext(ctx, getResourceGroupMapping, resourceUuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceIDGroupIDMapping
	for rows.Next() {
		var i ResourceIDGroupIDMapping
		if err := rows.Scan(
			&i.ResourceUuid,
			&i.GroupUuid,
			&i.Type,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
