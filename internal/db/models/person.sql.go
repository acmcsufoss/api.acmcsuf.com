// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: person.sql

package models

import (
	"context"
	"database/sql"
)

const createPerson = `-- name: CreatePerson :one
INSERT INTO
person (uuid, name, preferred_pronoun)
VALUES
(?, ?, ?)
RETURNING uuid, name, preferred_pronoun
`

type CreatePersonParams struct {
	Uuid             string         `json:"uuid"`
	Name             sql.NullString `json:"name"`
	PreferredPronoun sql.NullString `json:"preferred_pronoun"`
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRowContext(ctx, createPerson, arg.Uuid, arg.Name, arg.PreferredPronoun)
	var i Person
	err := row.Scan(&i.Uuid, &i.Name, &i.PreferredPronoun)
	return i, err
}

const getPerson = `-- name: GetPerson :one
SELECT
    uuid,
    name,
    preferred_pronoun
FROM
    person
WHERE
    uuid = ?
`

func (q *Queries) GetPerson(ctx context.Context, uuid string) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPerson, uuid)
	var i Person
	err := row.Scan(&i.Uuid, &i.Name, &i.PreferredPronoun)
	return i, err
}
