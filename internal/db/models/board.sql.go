// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: board.sql

package models

import (
	"context"
	"database/sql"
)

const createOfficer = `-- name: CreateOfficer :exec
INSERT INTO
officer (
    uuid,
    full_name,
    picture,
    github,
    discord
)
VALUES
(?, ?, ?, ?, ?)
RETURNING uuid, full_name, picture, github, discord
`

type CreateOfficerParams struct {
	Uuid     interface{}    `json:"uuid"`
	FullName string         `json:"full_name"`
	Picture  sql.NullString `json:"picture"`
	Github   sql.NullString `json:"github"`
	Discord  sql.NullString `json:"discord"`
}

func (q *Queries) CreateOfficer(ctx context.Context, arg CreateOfficerParams) error {
	_, err := q.db.ExecContext(ctx, createOfficer,
		arg.Uuid,
		arg.FullName,
		arg.Picture,
		arg.Github,
		arg.Discord,
	)
	return err
}

const getOfficer = `-- name: GetOfficer :one
SELECT
    uuid,
    full_name,
    picture,
    github,
    discord
FROM
    officer
WHERE
    uuid = ?
`

func (q *Queries) GetOfficer(ctx context.Context, uuid interface{}) (Officer, error) {
	row := q.db.QueryRowContext(ctx, getOfficer, uuid)
	var i Officer
	err := row.Scan(
		&i.Uuid,
		&i.FullName,
		&i.Picture,
		&i.Github,
		&i.Discord,
	)
	return i, err
}

const updateOfficer = `-- name: UpdateOfficer :exec
UPDATE officer
SET
    full_name = COALESCE(?1, full_name),
    picture = COALESCE(?2, picture),
    picture = COALESCE(?2, picture),
    github = COALESCE(?3, github),
    discord = COALESCE(?4, discord)
WHERE
    uuid = ?5
`

type UpdateOfficerParams struct {
	FullName sql.NullString `json:"full_name"`
	Picture  sql.NullString `json:"picture"`
	Github   sql.NullString `json:"github"`
	Discord  sql.NullString `json:"discord"`
	Uuid     interface{}    `json:"uuid"`
}

func (q *Queries) UpdateOfficer(ctx context.Context, arg UpdateOfficerParams) error {
	_, err := q.db.ExecContext(ctx, updateOfficer,
		arg.FullName,
		arg.Picture,
		arg.Github,
		arg.Discord,
		arg.Uuid,
	)
	return err
}
