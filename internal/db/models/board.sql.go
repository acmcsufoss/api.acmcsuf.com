// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: board.sql

package models

import (
	"context"
	"database/sql"
)

const createOfficer = `-- name: CreateOfficer :exec
INSERT INTO
officer (
    uuid,
    full_name,
    picture,
    github,
    discord
)
VALUES
(?, ?, ?, ?, ?)
RETURNING uuid, full_name, picture, github, discord
`

type CreateOfficerParams struct {
	Uuid     interface{}    `json:"uuid"`
	FullName string         `json:"full_name"`
	Picture  sql.NullString `json:"picture"`
	Github   sql.NullString `json:"github"`
	Discord  sql.NullString `json:"discord"`
}

func (q *Queries) CreateOfficer(ctx context.Context, arg CreateOfficerParams) error {
	_, err := q.db.ExecContext(ctx, createOfficer,
		arg.Uuid,
		arg.FullName,
		arg.Picture,
		arg.Github,
		arg.Discord,
	)
	return err
}

const createPosition = `-- name: CreatePosition :exec
INSERT INTO
position (
    oid,
    semester,
    tier,
    full_name,
    title,
    team
)
VALUES
(?, ?, ?, ?, ?, ?)
RETURNING oid, semester, tier, full_name, title, team
`

type CreatePositionParams struct {
	Oid      interface{}    `json:"oid"`
	Semester interface{}    `json:"semester"`
	Tier     int64          `json:"tier"`
	FullName string         `json:"full_name"`
	Title    sql.NullString `json:"title"`
	Team     sql.NullString `json:"team"`
}

func (q *Queries) CreatePosition(ctx context.Context, arg CreatePositionParams) error {
	_, err := q.db.ExecContext(ctx, createPosition,
		arg.Oid,
		arg.Semester,
		arg.Tier,
		arg.FullName,
		arg.Title,
		arg.Team,
	)
	return err
}

const createTier = `-- name: CreateTier :exec
INSERT INTO
tier (
    tier,
    title,
    t_index,
    team
)
VALUES
(?, ?, ?, ?)
RETURNING tier, title, t_index, team
`

type CreateTierParams struct {
	Tier   int64          `json:"tier"`
	Title  sql.NullString `json:"title"`
	TIndex sql.NullInt64  `json:"t_index"`
	Team   sql.NullString `json:"team"`
}

func (q *Queries) CreateTier(ctx context.Context, arg CreateTierParams) error {
	_, err := q.db.ExecContext(ctx, createTier,
		arg.Tier,
		arg.Title,
		arg.TIndex,
		arg.Team,
	)
	return err
}

const getOfficer = `-- name: GetOfficer :one
SELECT
    uuid,
    full_name,
    picture,
    github,
    discord
FROM
    officer
WHERE
    uuid = ?
`

func (q *Queries) GetOfficer(ctx context.Context, uuid interface{}) (Officer, error) {
	row := q.db.QueryRowContext(ctx, getOfficer, uuid)
	var i Officer
	err := row.Scan(
		&i.Uuid,
		&i.FullName,
		&i.Picture,
		&i.Github,
		&i.Discord,
	)
	return i, err
}

const getPosition = `-- name: GetPosition :one
SELECT
    oid,
    semester,
    tier,
    full_name,
    title,
    team
FROM
    position
WHERE
    full_name = ?
`

func (q *Queries) GetPosition(ctx context.Context, fullName string) (Position, error) {
	row := q.db.QueryRowContext(ctx, getPosition, fullName)
	var i Position
	err := row.Scan(
		&i.Oid,
		&i.Semester,
		&i.Tier,
		&i.FullName,
		&i.Title,
		&i.Team,
	)
	return i, err
}

const getTier = `-- name: GetTier :one
SELECT
    tier,
    title,
    t_index,
    team
FROM
    tier
WHERE
    tier = ?
`

func (q *Queries) GetTier(ctx context.Context, tier int64) (Tier, error) {
	row := q.db.QueryRowContext(ctx, getTier, tier)
	var i Tier
	err := row.Scan(
		&i.Tier,
		&i.Title,
		&i.TIndex,
		&i.Team,
	)
	return i, err
}
